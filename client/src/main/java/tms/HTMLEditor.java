package tms;

import java.awt.Color;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComponent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author Chris
 */
public class HTMLEditor extends javax.swing.JPanel {

    private TMSGUI tms = null;
    /**
     * Creates new form HTMLEditor
     */
    public HTMLEditor(TMSGUI _tms) {
        initComponents();
        tms = _tms;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new java.awt.ScrollPane();
        exportButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        final String key = "Save";
        // Enable Ctrl+S hotkey
        Action saveAction = new AbstractAction(key) {
			@Override
			public void actionPerformed(ActionEvent e) {
				saveButton.doClick(); // Animate the save button
				saveButtonMouseClicked(null); // Trigger the save action
			}
        };

        saveButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), key);
         
         
        saveButton.getActionMap().put(key, saveAction);
        
        scrollPane.setName(""); // NOI18N

        exportButton.setText("Export");
        exportButton.setMaximumSize(new java.awt.Dimension(48, 48));
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importButtonMouseClicked(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(saveButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(importButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(exportButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(241, Short.MAX_VALUE))
        		.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(saveButton)
        				.addComponent(importButton)
        				.addComponent(exportButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        			.addContainerGap())
        );
        this.setLayout(layout);
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "XHTML/HTML", "html", "htm", "xhtml");
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(tms.getSelectedTask() + ".html"));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
          File file = fileChooser.getSelectedFile();
          // save to file
          FileWriter fw;
            try {
                fw = new FileWriter(fileChooser.getSelectedFile());
                fw.write(tms.textArea.getText());
                fw.close();
            } catch (IOException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        String xhtml = tms.textArea.getText();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        Document doc;
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            doc = builder.parse(new ByteArrayInputStream(xhtml.getBytes()));
            tms.xhtmlPanel.setDocument(doc);
            tms.xhtmlPanel.updateUI();
            tms.getDBAdapter().updateXHTML(tms.selectedTask, xhtml, tms.getCredentials());
            
        } catch (SAXException ex) {
        	/*
        	String exStr = ex.toString();
        	exStr = exStr.substring(exStr.indexOf("lineNumber: "));
        	int firstSemiPos = exStr.indexOf(";");
        	String lineNumberStr = exStr.substring(exStr.indexOf(": ") + 2, firstSemiPos);
        	String columnNumberStr = exStr.substring(firstSemiPos);
        	columnNumberStr = columnNumberStr.substring(columnNumberStr.indexOf(": ") + 2);
        	columnNumberStr = columnNumberStr.substring(0, columnNumberStr.indexOf(";"));
        	
        	int lineNumber = Integer.parseInt(lineNumberStr);
        	int columnNumber = Integer.parseInt(columnNumberStr);
        	
        	// select the bad line
        	try {
				Object tag = tms.textArea.addLineHighlight(lineNumber - 1, Color.RED);
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	*/
        	JOptionPane.showMessageDialog(tms.frame, ex.getMessage());
            Logger.getLogger(HTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
            
        } catch (IOException ex) {
        	JOptionPane.showMessageDialog(tms.frame, ex.getMessage());
            Logger.getLogger(HTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
        	JOptionPane.showMessageDialog(tms.frame, ex.getMessage());
            Logger.getLogger(HTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
        	//JOptionPane.showMessageDialog(tms.frame, e.getMessage());
			e.printStackTrace();
		}
       
        
    }//GEN-LAST:event_saveButtonMouseClicked

    private void importButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importButtonMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "XHTML/HTML", "html", "htm", "xhtml");
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(tms.getSelectedTask() + ".html"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
          File file = fileChooser.getSelectedFile();
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                String content = "";
                String line = "";
                while((line = br.readLine()) != null) {
                    content += line + "\n";
                } 
                tms.textArea.setText(content);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HTMLEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        }
    }//GEN-LAST:event_importButtonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JButton importButton;
    private javax.swing.JButton saveButton;
    public java.awt.ScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
